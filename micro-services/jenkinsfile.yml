pipeline {
    agent any
    tools {
        nodejs "node2018"
        jdk "JDK17"
    }
    environment {
        DOCKHUB_USERNAME = "vivekkrishnab"
        DOCKHUB_PASSWORD = "vivek2003@"
        NEXUS_URL = "13.126.19.149:8082"
        NEXUS_USERNAME = "admin"
        NEXUS_PASSWORD = "vivek2003@"
        NEXUS_REPO = "docker-release"
    }
    stages {
        stage('Git Checkout') {
            steps {
                git branch: "main", url: 'https://github.com/vivek-66/payment-app.git', credentialsId: 'github-token'
            }
        }
        
        stage('Dependency Install') {
            steps {
                dir('micro-services/backend/auth_service') {
                    script {
                        sh 'python3 -m venv venv'
                        sh '. venv/bin/activate && pip install -r requirements.txt'
                    }
                }
                dir('micro-services/backend/payment_service') {
                    script {
                        sh 'python3 -m venv venv'
                        sh '. venv/bin/activate && pip install -r requirements.txt'
                    }
                }
                dir('micro-services/frontend/src') {
                    script {
                        sh 'npm install'
                    }
                }
            }
        }
        
        stage('Backend SonarQube Analysis') {
    steps {
        dir('micro-services/backend') {
            script {
                withCredentials([string(credentialsId: 'sonar-token', variable: 'SONAR_TOKEN')]) {
                    sh '''
                        /opt/sonar-scanner/bin/sonar-scanner \
                          -Dsonar.projectKey=payment-app-backend \
                          -Dsonar.sources=. \
                          -Dsonar.exclusions=**/__pycache__/**,**/venv/** \
                          -Dsonar.host.url=http://13.126.19.149:9000 \
                          -Dsonar.login=${SONAR_TOKEN}
                    '''
                }
            }
        }
    }
}

        
        stage('Frontend SonarQube Analysis') {
    steps {
        dir('micro-services/frontend') {
            script {
                withCredentials([string(credentialsId: 'sonar-token', variable: 'SONAR_TOKEN')]) {
                    sh '''
                        /opt/sonar-scanner/bin/sonar-scanner \
                          -Dsonar.projectKey=payment-app-frontend \
                          -Dsonar.sources=. \
                          -Dsonar.exclusions=**/node_modules/**,**/dist/**,**/.angular/** \
                          -Dsonar.host.url=http://13.126.19.149:9000 \
                          -Dsonar.login=${SONAR_TOKEN}
                    '''
                }
            }
        }
    }
}

      stage('Backend Build') {
    steps {
        dir('micro-services/backend/auth_service') {
            script {
                sh '''
                    python3.9 -m venv venv
                    . venv/bin/activate && pip install -r requirements.txt
                    export PYTHONPATH="$WORKSPACE/micro-services/backend:${PYTHONPATH}"
                '''
                // Run Uvicorn in the background (port 8090 to match curl)
                sh '''
                    nohup venv/bin/python -m uvicorn src.main:app --host 0.0.0.0 --port 8090 > uvicorn.log 2>&1 &
                '''
                // Wait for the server to start
                sleep 10
                // Health check (use localhost inside Jenkins)
                sh 'curl --fail http://localhost:8090/health || exit 1'
                // Show logs for debugging (optional)
                sh 'cat uvicorn.log || true'
                // Stop the Uvicorn server
                sh 'pkill -f "uvicorn" || true'
            }
        }
    }
}

                dir('micro-services/backend/payment_service') {
                    script {
                        sh '''
                            python3.9 -m venv venv
                            . venv/bin/activate && pip install -r requirements.txt
                            export PYTHONPATH="/var/lib/jenkins/workspace/Payment-App/micro-services/backend:${PYTHONPATH}"
                        '''
                        // Run Uvicorn in the background
                        sh 'uvicorn src.main:app --host 0.0.0.0 --port 8001 &'
                        // Wait for the server to start
                        sleep 10
                        // Health check to ensure the server is running
                        sh 'curl --fail http://:8081/api/payments/health || exit 1'
                        // Stop the Uvicorn server
                        sh 'pkill -f "uvicorn"'
                    }
                }
            }
        }
        
        stage('Frontend Build') {
            steps {
                dir('micro-services/frontend') {
                    script {
                        sh 'npm install'
                        sh 'npm run build --omit-dev'
                    }
                }
            }
        }
        
        stage('Build Docker Images') {
            steps {
                script {
                    def dockerImages = [
                        [dir: 'micro-services/backend/auth_service', name: 'backend-auth'],
                        [dir: 'micro-services/backend/payment_service', name: 'backend-payment'],
                        [dir: 'micro-services/frontend', name: 'frontend']
                    ]
                    // Read the version from version.txt
                    env.VERSION = readFile("micro-services/version.txt").trim()
                    dockerImages.each { img ->
                        dir(img.dir) {
                            sh "docker build --no-cache -t ${img.name}:${env.VERSION} ."
                        }
                    }
                }
            }
        }
        
        stage('Image Push') {
            steps {
                script {
                    def dockerImages = [
                        [dir: 'micro-services/backend/auth_service', name: 'backend-auth'],
                        [dir: 'micro-services/backend/payment_service', name: 'backend-payment'],
                        [dir: 'micro-services/frontend', name: 'frontend']
                    ]
                    // Tag images in order to push to nexus/dockerhub
                    dockerImages.each { img ->
                        dir(img.dir) {
                            sh "docker tag ${img.name}:${env.VERSION} ${DOCKHUB_USERNAME}/${img.name}:${env.VERSION}"
                            sh "docker tag ${img.name}:${env.VERSION} ${NEXUS_URL}/${NEXUS_REPO}/${img.name}:${env.VERSION}"
                        }
                    }
                    // login to NEXUS
                    sh "echo ${NEXUS_PASSWORD} | docker login ${NEXUS_URL} -u ${NEXUS_USERNAME} --password-stdin"
                    // push to Nexus
                    dockerImages.each { img ->
                        dir(img.dir) {
                            sh "docker push ${NEXUS_URL}/${NEXUS_REPO}/${img.name}:${env.VERSION}"
                        }
                    }
                    // login to Dockerhub
                    sh "echo ${DOCKHUB_PASSWORD} | docker login -u ${DOCKHUB_USERNAME} --password-stdin"
                    // push to Dockerhub
                    dockerImages.each { img ->
                        dir(img.dir) {
                            sh "docker push ${DOCKHUB_USERNAME}/${img.name}:${env.VERSION}"
                        }
                    }
                }
            }
        }
        
        stage('Deploy Services') {
            steps {
                dir('micro-services') {
                    sh 'docker-compose up -d --build'
                }
            }
        }
        
        stage('Monitor Services') {
            steps {
                dir('micro-services/prometheus') {
                    sh 'docker-compose up -d --build'
                }
            }
        }
    }
    post {
        always {
            echo 'Cleaning up...'
            sh '''
                pkill -f "uvicorn" || true
                rm -rf venv
                find . -type d -name "__pycache__" -exec rm -rf {} +
            '''
            cleanWs()
        }
    }
}
