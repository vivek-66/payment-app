pipeline {
    agent any
    tools {
        nodejs 'node2018'  // <-- must match your Jenkins tool config
    }

    stages {
        stage('Git Checkout') {
            steps {
                git branch: 'main',
                    url: 'https://github.com/vivek-66/payment-app.git',
                    credentialsId: 'git-token'
            }
        }

        stage('SonarQube Analysis - Backend') {
            steps {
                withCredentials([string(credentialsId: 'sonar-token', variable: 'SONAR_TOKEN')]) {
                    dir('micro-services/backend') {
                        sh """
                            /opt/sonar-scanner/bin/sonar-scanner \
                            -Dsonar.projectKey=payment-app-backend \
                            -Dsonar.sources=. \
                            -Dsonar.host.url=http://13.233.145.48:9000 \
                            -Dsonar.login=${SONAR_TOKEN}
                        """
                    }
                }
            }
        }

        stage('SonarQube Analysis - Frontend') {
            steps {
                withCredentials([string(credentialsId: 'sonar-token', variable: 'SONAR_TOKEN')]) {
                    dir('micro-services/frontend') {
                        sh """
                            /opt/sonar-scanner/bin/sonar-scanner \
                            -Dsonar.projectKey=payment-app-frontend \
                            -Dsonar.sources=. \
                            -Dsonar.host.url=http://13.233.145.48:9000 \
                            -Dsonar.login=${SONAR_TOKEN}
                        """
                    }
                }
            }
        }

        stage('Backend Build') {
            steps {
                dir('micro-services/backend/auth_service') {
                    sh '''
                        python3.9 -m venv venv
                        . venv/bin/activate && pip install --upgrade pip && pip install -r requirements.txt
                        export PYTHONPATH="$WORKSPACE/micro-services/backend:${PYTHONPATH}"
                        uvicorn src.main:app --host 0.0.0.0 --port 8000 &
                        sleep 10
                        curl --fail http://127.0.0.1:8000/health || exit 1
                        pkill -f "uvicorn"
                    '''
                }
                dir('micro-services/backend/payment_service') {
                    sh '''
                        python3.9 -m venv venv
                        . venv/bin/activate && pip install --upgrade pip && pip install -r requirements.txt
                        export PYTHONPATH="$WORKSPACE/micro-services/backend:${PYTHONPATH}"
                        uvicorn src.main:app --host 0.0.0.0 --port 8001 &
                        sleep 10
                        curl --fail http://127.0.0.1:8001/api/payments/health || exit 1
                        pkill -f "uvicorn"
                    '''
                }
            }
        }

        stage('Frontend Build') {
            steps {
                dir('micro-services/frontend') {
                    sh '''
                        npm install
                        npm run build --omit-dev
                    '''
                }
            }
        }

        stage('Build Docker Images') {
            steps {
                script {
                    def dockerImages = [
                        [dir: 'micro-services/backend/auth_service', name: 'backend-auth'],
                        [dir: 'micro-services/backend/payment_service', name: 'backend-payment'],
                        [dir: 'micro-services/frontend', name: 'frontend']
                    ]
                    env.VERSION = readFile("micro-services/version.txt").trim()

                    dockerImages.each { img ->
                        dir(img.dir) {
                            sh "docker build -t ${img.name}:${env.VERSION} ."  // <-- removed --no-cache
                        }
                    }
                }
            }
        }

        stage('Push Images to Nexus & DockerHub') {
            steps {
                script {
                    def dockerImages = [
                        [name: 'backend-auth'],
                        [name: 'backend-payment'],
                        [name: 'frontend']
                    ]

                    // Push to Nexus
                    withCredentials([usernamePassword(credentialsId: 'nexus-creds',
                                                     usernameVariable: 'NEXUS_USER',
                                                     passwordVariable: 'NEXUS_PASS')]) {
                        sh "echo ${NEXUS_PASS} | docker login http://13.233.145.48:8082 -u ${NEXUS_USER} --password-stdin"
                        dockerImages.each { img ->
                            sh """
                                docker tag ${img.name}:${env.VERSION} 13.233.145.48:8082/docker-releases/${img.name}:${env.VERSION}
                                docker push 13.233.145.48:8082/docker-releases/${img.name}:${env.VERSION}
                            """
                        }
                    }

                    // Push to DockerHub
                    withCredentials([usernamePassword(credentialsId: 'dockerhub-creds',
                                                     usernameVariable: 'DOCKER_USER',
                                                     passwordVariable: 'DOCKER_PASS')]) {
                        sh "echo ${DOCKER_PASS} | docker login -u ${DOCKER_USER} --password-stdin"
                        dockerImages.each { img ->
                            sh """
                                docker tag ${img.name}:${env.VERSION} ${DOCKER_USER}/${img.name}:${env.VERSION}
                                docker push ${DOCKER_USER}/${img.name}:${env.VERSION}
                            """
                        }
                    }
                }
            }
        }

        stage('Deploy Services') {
            steps {
                dir('micro-services') {
                    sh 'docker-compose up -d --build'
                }
            }
        }

        stage('Monitor Services') {
            steps {
                dir('micro-services/prometheus') {
                    sh 'docker-compose up -d --build'
                }
            }
        }
    }

    post {
        always {
            echo 'Cleaning up...'
            sh '''
                pkill -f "uvicorn" || true
                rm -rf venv
                find . -type d -name "__pycache__" -exec rm -rf {} +
            '''
            cleanWs()
        }
    }
}

