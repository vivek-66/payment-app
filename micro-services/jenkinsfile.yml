pipeline {
    agent any
    tools {
        nodejs 'node2018'
        jdk 'JDK17'   // <-- must match the actual tool name in Jenkins
    }

    stages {
        stage('Git Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/www-domain/payment-app.git'
            }
        }

        stage('SonarQube Analysis - Backend') {
            steps {
                withCredentials([string(credentialsId: 'sonar-url', variable: 'SONAR_URL'),
                                 string(credentialsId: 'sonar-token-backend', variable: 'SONAR_TOKEN')]) {
                    dir('micro-services/backend') {
                        sh """
                        /opt/sonar-scanner/bin/sonar-scanner \
                          -Dsonar.projectKey=payment-app-backend \
                          -Dsonar.sources=. \
                          -Dsonar.host.url=${SONAR_URL} \
                          -Dsonar.login=${SONAR_TOKEN} \
                          -Dsonar.exclusions=**/venv/**,**/__pycache__/**
                        """
                    }
                }
            }
        }

        stage('SonarQube Analysis - Frontend') {
            steps {
                withCredentials([string(credentialsId: 'sonar-url', variable: 'SONAR_URL'),
                                 string(credentialsId: 'sonar-token-frontend', variable: 'SONAR_TOKEN')]) {
                    dir('micro-services/frontend') {
                        sh """
                        /opt/sonar-scanner/bin/sonar-scanner \
                          -Dsonar.projectKey=payment-app-frontend \
                          -Dsonar.sources=. \
                          -Dsonar.host.url=${SONAR_URL} \
                          -Dsonar.login=${SONAR_TOKEN} \
                          -Dsonar.exclusions=**/node_modules/**,**/dist/**
                        """
                    }
                }
            }
        }

        stage('Backend Build') {
            steps {
                dir('micro-services/backend/auth_service') {
                    sh '''
                        python3.9 -m venv venv
                        . venv/bin/activate && pip install --upgrade pip && pip install -r requirements.txt
                        export PYTHONPATH="$PWD:${PYTHONPATH}"
                        uvicorn src.main:app --host 0.0.0.0 --port 8000 &
                        sleep 10
                        curl --fail http://127.0.0.1:8000/health || exit 1
                        pkill -f "uvicorn"
                    '''
                }
                dir('micro-services/backend/payment_service') {
                    sh '''
                        python3.9 -m venv venv
                        . venv/bin/activate && pip install --upgrade pip && pip install -r requirements.txt
                        export PYTHONPATH="$PWD:${PYTHONPATH}"
                        uvicorn src.main:app --host 0.0.0.0 --port 8001 &
                        sleep 10
                        curl --fail http://127.0.0.1:8001/api/payments/health || exit 1
                        pkill -f "uvicorn"
                    '''
                }
            }
        }

        stage('Frontend Build') {
            steps {
                dir('micro-services/frontend') {
                    sh '''
                        npm install
                        npm run build --omit-dev
                    '''
                }
            }
        }

        stage('Build Docker Images') {
            steps {
                script {
                    def dockerImages = [
                        [dir: 'micro-services/backend/auth_service', name: 'backend-auth'], 
                        [dir: 'micro-services/backend/payment_service', name: 'backend-payment'], 
                        [dir: 'micro-services/frontend', name: 'frontend']
                    ]
                    env.VERSION = readFile("micro-services/version.txt").trim()
                    dockerImages.each { img -> 
                        dir(img.dir) {
                            sh "docker build --no-cache -t ${img.name}:${env.VERSION} ."
                        }
                    }
                }
            }
        }

        stage('Image Push') {
            steps {
                script {
                    def dockerImages = [
                        [dir: 'micro-services/backend/auth_service', name: 'backend-auth'], 
                        [dir: 'micro-services/backend/payment_service', name: 'backend-payment'], 
                        [dir: 'micro-services/frontend', name: 'frontend']
                    ]

                    // Push to Nexus
                    withCredentials([usernamePassword(credentialsId: 'nexus-creds',
                                                     passwordVariable: 'NEXUS_PASSWORD',
                                                     usernameVariable: 'NEXUS_USERNAME')]) {
                        sh "echo ${NEXUS_PASSWORD} | docker login ${NEXUS_URL} -u ${NEXUS_USERNAME} --password-stdin"
                        dockerImages.each { img ->
                            sh "docker tag ${img.name}:${env.VERSION} ${NEXUS_URL}/${NEXUS_REPO}/${img.name}:${env.VERSION}"
                            sh "docker push ${NEXUS_URL}/${NEXUS_REPO}/${img.name}:${env.VERSION}"
                        }
                    }

                    // Push to DockerHub
                    withCredentials([usernamePassword(credentialsId: 'dockerhub-creds',
                                                     passwordVariable: 'DOCKHUB_PASSWORD',
                                                     usernameVariable: 'DOCKHUB_USERNAME')]) {
                        sh "echo ${DOCKHUB_PASSWORD} | docker login -u ${DOCKHUB_USERNAME} --password-stdin"
                        dockerImages.each { img ->
                            sh "docker tag ${img.name}:${env.VERSION} ${DOCKHUB_USERNAME}/${img.name}:${env.VERSION}"
                            sh "docker push ${DOCKHUB_USERNAME}/${img.name}:${env.VERSION}"
                        }
                    }
                }
            }
        }

        stage('Deploy Services') {
            steps {
                dir('micro-services') {
                    sh 'docker-compose up -d --build'
                }
            }
        }

        stage('Monitor Services') {
            steps {
                dir('micro-services/prometheus') {
                    sh 'docker-compose up -d --build'
                }
            }
        }
    }

    post {
        always {
            echo 'Cleaning up...'
            sh '''
                pkill -f "uvicorn" || true
                find . -type d -name "__pycache__" -exec rm -rf {} +
            '''
            cleanWs()
        }
    }
}

